#!/usr/bin/env sh
usage () {
    echo "OSINTBuddy launcher usage: ./ob/launcher COMMAND CONFIG [--skip-prereqs] [--docker-args STRING]"
    echo "Commands:"
    echo "    bootstrap:   Initialize and download dependencies and check for environment misconfigurations"
    echo "    start:       Start the OSINTBuddy app"
    echo "    stop:        Stop the OSINTBuddy app (or a specific container ./ob/launcher stop janus)"
    echo "    restart:     Restart the app (or a specific container: ./ob/launcher restart janus)"
    echo "    ui:          Launch the UI in development mode"
    echo "    debugsend:   Upload the docker compose logs to https://paste.c-net.org and help the developers with debugging any issues"
    
    exit 1
}

cd "$(dirname $0)"
source "./.env.alpha"

command=$1
config=$2


config_file="ob-alpha-compose.yml"
docker_path=`which docker`
git_path=`which git`

alias ob_compose="$docker_path compose -f $config_file"




# From https://stackoverflow.com/a/44660519/702738
compare_version()
{
    if [[ $1 == $2 ]]; then
        return 1
    fi
    local IFS=.
    local i a=(${1%%[^0-9.]*}) b=(${2%%[^0-9.]*})
    local arem=${1#${1%%[^0-9.]*}} brem=${2#${2%%[^0-9.]*}}
    for ((i=0; i<${#a[@]} || i<${#b[@]}; i++)); do
        if ((10#${a[i]:-0} < 10#${b[i]:-0})); then
            return 1
            elif ((10#${a[i]:-0} > 10#${b[i]:-0})); then
            return 0
        fi
    done
    if [ "$arem" '<' "$brem" ]; then
        return 1
        elif [ "$arem" '>' "$brem" ]; then
        return 0
    fi
    return 1
}


launch()
{
    ob_compose up -d
}


fatal ()
{
    echo -e "\n$1\n"
    exit "${2:-1}"
}

install_docker()
{
    echo "Docker is not installed, you will need to install Docker in order to run the OSINTBuddy Launcher"
    echo "See https://docs.docker.com/installation/"
    exit 1
}

pastebin()
{
    ob_compose logs > osintbuddy-debug.log
    local url='https://paste.c-net.org/'
    local file='osintbuddy-debug.log'
    curl -s \
    --data-binary @"$file" \
    --header "X-FileName: ${file##*/}" \
    "$url"
    # curl -s --data-binary @- "$url"
    rm osintbuddy-debug.log
}

check_images ()
{
    # TODO: fix me
    test_solr=`$docker_path images | awk '{print $1 ":" $2 }' | grep "$SOLR_IMAGE"`
    test_janus=`$docker_path images | awk '{print $1 ":" $2 }' | grep "$JANUS_IMAGE"`
    test_postgres=`$docker_path images | awk '{print $1 ":" $2 }' | grep "$POSTGRES_IMAGE"`
    test_s3=`$docker_path images | awk '{print $1 ":" $2 }' | grep "$S3_IMAGE"`
    test_clearly`$docker_path images | awk '{print $1 ":" $2 }' | grep "$CLEARLY_IMAGE"`
    test_backend=`$docker_path images | awk '{print $1 ":" $2 }' | grep "$BACKEND_IMAGE"`
    test_nginx=`$docker_path images | awk '{print $1 ":" $2 }' | grep "$NGINX_IMAGE"`
    test_scylla=`$docker_path images | awk '{print $1 ":" $2 }' | grep "$SCYLLA_IMAGE"`
    test_node=`$docker_path images | awk '{print $1 ":" $2 }' | grep "$NODE_IMAGE"`
    test_redis=`$docker_path images | awk '{print $1 ":" $2 }' | grep "$REDIS_IMAGE"`
    
    
    # arm experimental support is on a fixed tag, always pull
    if [ -z "$test_solr" ] || [ -z "$test_janus" ] || [ -z "$test_postgres" ] || [ -z "$test_s3" ] || [ -z "$test_clearly" ] || [ -z "$test_backend" ] || [ -z "$test_nginx" ] || [ -z "$test_scylla" ] || [ -z "$test_node" ] || [ -z "$test_redis" ] || [ $arm = true ]; then
        echo
        echo "WARNING: We are about to start downloading the base images for OSINTBuddy"
        echo "This process may take anywhere between 10 minutes to an hour, depending on your network speed"
        echo
        echo "Please be patient"
        echo
        
        ob_compose pull
    fi
}

check_prereqs()
{
    if [ -z $docker_path ]; then
        install_docker
    fi
    
    # 1. docker daemon running?
    # we send stderr to /dev/null cause we don't care about warnings,
    # it usually complains about swap which does not matter
    test=`$docker_path info 2> /dev/null`
    if [[ $? -ne 0 ]] ; then
        echo "Cannot connect to the docker daemon - verify it is running and you have access"
        exit 1
    fi
    
    # 2. running recommended docker version
    test=($($docker_path --version))  # Get docker version string
    test=${test[2]//,/}  # Get version alone and strip comma if exists
    
    # At least minimum docker version
    if compare_version "${docker_min_version}" "${test}"; then
        echo "ERROR: Docker version ${test} not supported, please upgrade to at least ${docker_min_version}, or recommended ${docker_rec_version}"
        exit 1
    fi
    
    # 3. docker images are downloadeded
    # check_images
    
    arm=false
    case $(uname -m) in
        armv7l)
            echo "ERROR: 32bit arm is not supported. Check if your hardware support arm64, which is supported in experimental capacity."
            exit 1
        ;;
        aarch64 | arm64)
            echo "WARNING: Support for aarch64 is experimental at the moment. Please report any problems at https://forum.osintbuddy.com/c/bug-reports/6"
            image=""
            arm=true
        ;;
        x86_64)
            echo "x86_64 arch detected."
        ;;
        *)
            echo "ERROR: unknown arch detected."
            exit 1
        ;;
    esac
    
    # 4. running recommended git version
    test=($($git_path --version))  # Get git version string
    test=${test[2]//,/}  # Get version alone and strip comma if exists
    
    # At least minimum version
    if compare_version "${git_min_version}" "${test}"; then
        echo "ERROR: Git version ${test} not supported, please upgrade to at least ${git_min_version}, or recommended ${git_rec_version}"
        exit 1
    fi
    
    # Recommend best version
    if compare_version "${git_rec_version}" "${test}"; then
        echo "WARNING: Git version ${test} deprecated, recommend upgrade to ${git_rec_version} or newer."
    fi
}


container_ids()
{
    ID_UI=$(cmd/container_id "ob_dev_ui");
    ID_BACKEND=$(cmd/container_id "ob_dev_backend");
    ID_REDIS=$(cmd/container_id "ob_dev_redis");
    ID_DB=$(cmd/container_id "ob_dev_db");
    ID_JANUS=$(cmd/container_id "ob_dev_janus");
    ID_SDB=$(cmd/container_id "ob_dev_sdb");
    ID_INDEX=$(cmd/container_id "ob_dev_index");
    ID_WORKER=$(cmd/container_id "ob_dev_worker");
    ID_CLEARLY=$(cmd/container_id "ob_dev_clearly");
    ID_S3=$(cmd/container_id "ob_dev_s3");
}


run_run()
{
    unset ERR
    ob_compose up -d || ERR=$?
    
    if [[ $ERR > 0 ]]; then
        exit 1
    fi
}

run_bootstrap()
{
    check_prereqs
    ob_compose build
}

if [ -z "$command" -a "$command" != "cleanup" ]; then
    usage
fi

case "$command" in
    bootstrap)
        run_bootstrap
        echo "Successfully bootstrapped, to startup use ./ob/launcher start $config"
        exit 0
    ;;
    start)
        run_run
        exit 0
    ;;
    restart)
        if [ ! -z "$command" ] & [ ! -z "$config" ]; then
            ob_compose restart $config;
            exit 0
        else
            ob_compose restart;
            exit 0
        fi
    ;;
    stop)
        if [ ! -z "$command" ] & [ ! -z "$config" ]; then
            ob_compose stop $config
            exit 0
        else
            ob_compose stop
            exit 0
        fi
    ;;
    logs)
        if [ ! -z "$command" ] & [ ! -z "$config" ]; then
            ob_compose logs $config -f
            exit 0
        else
            ob_compose logs -f
            exit 0
        fi
    ;;
    dev)
        ob_compose stop ui;
        cd ../frontend && \
        yarn start
        exit 0
    ;;
    debugsend)
        pastebin
        exit 0
    ;;
esac


usage
